apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

//def getAppVersionCode = { ->
//    return project.hasProperty('versionCode') ? versionCode.toInteger() : 1
//}
//
//def getAppVersionName = { ->
//    return project.hasProperty('versionName') ? versionName : "1.0"
//}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.mvptest"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.com.example.mvptest.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            lintOptions {
                checkReleaseBuilds false
                abortOnError false
            }
            applicationIdSuffix buildTypeRelease

            buildConfigField("String", "BASE_URL", "\"https://api.github.com/\"")
        }
        debug {
            applicationIdSuffix buildTypeDebug

            buildConfigField("String", "BASE_URL", "\"https://api.github.com/\"")
        }
    }
    applicationVariants.all { variant ->
        def buildType = variant.buildType.name.toLowerCase()

        variant.outputs.each { output ->
            def versionCodeOverride = buildVersionCode(buildType)

            output.versionCodeOverride = versionCodeOverride

            buildConfigField 'int', 'VERSION_CODE_OVERRIDE', "$versionCodeOverride"

            output.versionNameOverride = "$appVersion"

            buildConfigField 'String', 'VERSION_NAME_OVERRIDE', "\"$appVersion\""
        }

        variant.outputs.all { output ->
            outputFileName = "app-${appName}-${buildType}-${appVersion}.apk"
        }
    }

    flavorDimensions "type"

    productFlavors {
        demo {
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
        }

        production {
            dimension "type"
            applicationIdSuffix ".pro"
            versionNameSuffix "-pro"
        }
    }
}

ext {
    buildVersionCode = { buildType ->
        def candidate

        def (major, minor, patch) = appVersion.toLowerCase().tokenize('.')

        if (buildType.toLowerCase() == buildTypeDebug.toLowerCase()) {
            candidate = "0"
            patch = patch.replaceAll("[^0-9]","")

        } else if(buildType.toLowerCase() == buildTypeQa.toLowerCase()) {
            candidate = "1"
        } else if(buildType.toLowerCase() == buildTypeRelease.toLowerCase()) {
            candidate = "99"
        } else {
            throw new RuntimeException("알 수 없는 buildType 입니다. ($buildType)")
        }

        (major, minor, patch, candidate) = [major, minor, patch, candidate].collect{ it.toInteger() }

        (major * 1000000) + (minor * 10000) + (patch * 100) + candidate
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

//    implementation "com.android.support:appcompat-v7:$support_lib_version"
//    implementation "com.android.support:recyclerview-v7:$support_lib_version"
//    implementation "com.android.support:support-v4:$support_lib_version"
//    implementation "com.android.support:design:$support_lib_version
    implementation 'androidx.recyclerview:recyclerview:1.1.0-alpha02'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha03'
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "android.arch.persistence.room:runtime:$arch_room_version"
    annotationProcessor "android.arch.persistence.room:compiler:$arch_room_version"
    kapt "android.arch.persistence.room:compiler:$arch_room_version"
    implementation "android.arch.persistence.room:rxjava2:1.1.1"
    // Databinding
//    kapt "androidx.databinding:databinding-compiler:3.3.2"
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:converter-simplexml:2.3.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    // Image Loader
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    kapt 'com.github.bumptech.glide:compiler:4.7.1'
    implementation "com.github.bumptech.glide:okhttp3-integration:4.7.1"
    // event bus
    implementation 'org.greenrobot:eventbus:3.1.1'
    //dagger
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    // rx
    implementation "io.reactivex.rxjava2:rxkotlin:2.2.0"
    implementation "io.reactivex.rxjava2:rxjava:2.2.5"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"
    implementation "com.jakewharton.rxrelay2:rxrelay:2.0.0"
    // aac
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
    implementation "android.arch.work:work-runtime:1.0.0-rc02"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
}
